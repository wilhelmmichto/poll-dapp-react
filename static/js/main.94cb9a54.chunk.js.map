{"version":3,"sources":["components/Navbar/Navbar.jsx","components/Main/Main.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","this","props","account","Component","Main","_ref","candidate1","candidate2","voteCandidate","_useState","useState","_useState2","Object","slicedToArray","Candidate","setCandidate","onSubmit","e","preventDefault","id","Number","window","alert","name","onChange","target","value","console","log","defaultValue","voteCount","App","useEffect","loadWeb3","LoadBlockchaindata","Currentaccount","setCurrentaccount","_useState3","_useState4","loader","setloader","_useState5","_useState6","Electionsm","SetElectionsm","_useState7","_useState8","Candidate1","setCandidate1","_useState9","_useState10","Candidate2","setCandidate2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","ethereum","web3","Web3","enable","currentProvider","stop","apply","arguments","_ref2","_callee2","accounts","networkId","networkData","election","_context2","eth","getAccounts","sent","net","getId","Electionabi","networks","Contract","abi","address","methods","candidates","call","_ref3","_callee3","candidateid","_context3","vote","send","from","on","_x","src","alt","components_Navbar_Navbar","components_Main_Main","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94cb9a54.chunk.js","sourcesContent":["import \"./Navbar.css\";\r\n\r\nimport React, { Component } from \"react\";\r\nclass Navbar extends Component {\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <div className=\"navleft\">\r\n        <span className=\"navheading\">\r\n          Marvel v DC VOTING DAPP\r\n        </span>\r\n      </div>\r\n      <div className=\"centernav\">\r\n      <span className=\"navheading\">\r\n          Marvel v DC VOTING DAPP\r\n        </span>\r\n      </div>\r\n      <div className=\"navright\">\r\n        <ul className=\"navul\">\r\n          <li>\r\n            <span className=\"navheading\">\r\n              Account Number: {this.props.account}\r\n            </span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\n\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport './main.css'\r\n\r\nconst Main = ({ candidate1, candidate2, voteCandidate, account }) => {\r\n  const [Candidate, setCandidate] = useState(\"\");\r\n\r\n  const onchange = (e) => {\r\n    setCandidate(e.target.value);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  const onsubmit = (e) => {\r\n    e.preventDefault();\r\n    if (Candidate.id !== 0) voteCandidate(Number(Candidate));\r\n    else window.alert(\"there is error in submission\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n\r\n      <div className=\"vote\">\r\n\r\n        <h2 className=\"h2\">Fate of the Universe depends on your vote!</h2>\r\n        <form onSubmit={onsubmit}>\r\n          <select name=\"candidate\" className=\"form-control\" onChange={onchange}>\r\n            <option defaultValue value=\"\">\r\n              Select\r\n            </option>\r\n            <option value=\"1\">{candidate1.name}</option>\r\n            <option value=\"2\">{candidate2.name}</option>\r\n          </select>\r\n          <button className=\"btn btn-primary\">\r\n            Vote {\"\"}  {Candidate} ?\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className=\"result\">\r\n        <h2>Poll Results</h2>\r\n        <hr />\r\n\r\n        <div>\r\n          <div className=\"table\">\r\n            <p className=\"header\">ID</p>\r\n            <p className=\"header\">Name</p>\r\n            <p className=\"header\">Votes</p>\r\n          </div>\r\n          <div className=\"table\">\r\n            <p>{candidate1.id}</p>\r\n            <p>{candidate1.name}</p>\r\n            <p>{candidate1.voteCount}</p>\r\n          </div>\r\n          <div className=\"table\">\r\n            <p>{candidate2.id}</p>\r\n            <p className=\"pa\">{candidate2.name}</p>\r\n            <p>{candidate2.voteCount}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"address\">\r\n          <p > Your address is &nbsp; </p>\r\n          <p>{account}</p>\r\n          \r\n        </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;","import React, {  useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport Main from \"./Main/Main\";\r\nimport Web3 from \"web3\";\r\nimport Electionabi from \"../truffle_abis/Poll.json\";\r\n\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    loadWeb3();\r\n    LoadBlockchaindata();\r\n  }, []);\r\n\r\n  const [Currentaccount, setCurrentaccount] = useState(\"\");\r\n  const [loader, setloader] = useState(true);\r\n  const [Electionsm, SetElectionsm] = useState();\r\n  const [Candidate1, setCandidate1] = useState();\r\n  const [Candidate2, setCandidate2] = useState();\r\n  const loadWeb3 = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const LoadBlockchaindata = async () => {\r\n    setloader(true);\r\n    const web3 = window.web3;\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    const account = accounts[0];\r\n    setCurrentaccount(account);\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const networkData = Electionabi.networks[networkId];\r\n\r\n    if (networkData) {\r\n      const election = new web3.eth.Contract(\r\n        Electionabi.abi,\r\n        networkData.address\r\n      );\r\n      const candidate1 = await election.methods.candidates(1).call();\r\n      console.log(candidate1.id);\r\n      // const candidate1id = candidate1.id;\r\n      // const candidate1name = candidate1.name;\r\n      // const candidate1votecount = candidate1.voteCount;\r\n      const candidate2 = await election.methods.candidates(2).call();\r\n      // const candidate2id = candidate1.id;\r\n      // const candidate2name = candidate2.name;\r\n      // const candidate2votecount = candidate2.voteCount;\r\n      setCandidate1(candidate1);\r\n      setCandidate2(candidate2);\r\n      SetElectionsm(election);\r\n      setloader(false);\r\n    } else {\r\n      window.alert(\"the smart contract is not deployed current network. Try Ropsten Network!\");\r\n    }\r\n  };\r\n\r\n  const voteCandidate = async (candidateid) => {\r\n    setloader(true);\r\n    await Electionsm.methods\r\n      .vote(candidateid)\r\n      .send({ from: Currentaccount })\r\n      .on(\"transactionhash\", () => {\r\n        console.log(\"succesfully ran\");\r\n      });\r\n    setloader(false);\r\n  };\r\n\r\n  if (loader) {\r\n    return <div className=\"loading\"><div className=\"loadingContainer\">\r\n    <div className=\"ball1\"></div>\r\n    <div className=\"ball2\"></div>\r\n    <div className=\"ball3\"></div>\r\n    <div className=\"ball4\"></div>\r\n</div></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <img className=\"image\" src=\"../1061065.png\" alt=\"\" />\r\n      <Navbar account={Currentaccount} />\r\n      <Main\r\n        candidate1={Candidate1}\r\n        candidate2={Candidate2}\r\n        voteCandidate={voteCandidate}\r\n        account={Currentaccount}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}